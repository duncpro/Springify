AWSTemplateFormatVersion: 2010-09-09
Description: >-
  springify

Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    CodeUri: ./dist
    Runtime: nodejs12.x
    Environment:
      Variables:
        NODE_OPTIONS: '-r source-map-support/register'

Parameters:
  SpringboardSubDomain:
    Type: String
    Description: The DNS subdomain of the Springboard Retail instance Springify should bind to.
  SpringboardToken:
    Type: String
    Description: The Springboard Retail bearer token that Springify should authenticate with.
  ShopifySubDomain:
    Type: String
    Description: The DNS subdomain of the Shopify instance that Springify should bind to.
  ShopifyKey:
    Type: String
    Description: The API key for authenticating with the Shopify API.
  ShopifyAppPassword:
    Type: String
    Description: The password given to our app by the Shopify API.
  SpringifySecurityGroupIds:
    Type: CommaDelimitedList
  SpringifySubnetIds:
    Type: CommaDelimitedList

Resources:
  BottleneckDatabaseSG:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet Group for BottleneckDatabase.
      SubnetIds: !Ref SpringifySubnetIds

  BottleneckDatabase:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds: !Ref SpringifySecurityGroupIds
      CacheSubnetGroupName: !Ref BottleneckDatabaseSG

  # When a Springboard item is changed, it is added to this queue. The Shopify manipulator processes this queue.
  PendingItemsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      FifoQueue: True
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "FailedItemUpdatesQueue"
            - "Arn"
        maxReceiveCount: 1

  # Item updates that cannot be completed are added to this queue.
  FailedItemUpdatesQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True


  ShopifyManipulator:
    Type: AWS::Serverless::Function
    Properties:
      Description: Updates Shopify to reflect a change in a Springboard item.
      Handler: handlers/shopify-manipulator.processItemUpdateEvents
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SkuVariantMap
      Environment:
        Variables:
          SkuVariantMapTableName: !Ref SkuVariantMap
          ShopifySubDomain: !Ref ShopifySubDomain
          ShopifyAppPassword: !Ref ShopifyAppPassword
          ShopifyKey: !Ref ShopifyKey
          BottleneckDatabasePort: !GetAtt BottleneckDatabase.RedisEndpoint.Port
          BottleneckDatabaseAddress: !GetAtt BottleneckDatabase.RedisEndpoint.Address
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PendingItemsQueue.Arn
            BatchSize: 1
      MemorySize: 1280
      Timeout: 60
      VpcConfig:
        SecurityGroupIds: !Ref SpringifySecurityGroupIds
        SubnetIds: !Ref SpringifySubnetIds

  SpringboardItemListenerHttpApi:
    Type: AWS::Serverless::HttpApi

  AWSDeploymentListener:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Invoked by deploy.js after the SAM application is successfully deployed to AWS.
        This function performs initialization tasks like registering webhooks with Springboard and Shopify.
      Handler: handlers/aws-deployment-listener.onSuccessfulAWSDeployment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GeneralKVStore
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          SpringboardItemListenerEndpoint: !Sub 'https://${SpringboardItemListenerHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Springboard/Webhooks/ItemEvent'
          GeneralKVStoreName: !Ref GeneralKVStore
          SpringboardSubDomain: !Ref SpringboardSubDomain
          SpringboardToken: !Ref SpringboardToken
  MonthlySync:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      Description: >-
        Queues all items stored in Springboard Retail.
      Handler: handlers/monthly-sync.performMonthlySync
      Policies:
        - AWSLambdaBasicExecutionRole
        - LambdaInvokePolicy:
            FunctionName: ''
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PendingItemsQueue.QueueName
      Environment:
        Variables:
          QueueUrl: !Ref PendingItemsQueue
          SpringboardSubDomain: !Ref SpringboardSubDomain
          SpringboardToken: !Ref SpringboardToken
      Events:
        Monthly:
          Type: Schedule
          Properties:
            Schedule: rate(30 days)

  DailySync:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Queues items that have been changed in the last twenty four hours.
        Ensures that image modifications get pushed in a timely manner. Springboard does not fire events for image changes.
      Handler: handlers/daily-sync.performDailySync
      # 15 minutes is the maximum amount of time that a Lambda function can run.
      # This should be more than enough time to download and queue all of the items that were changed in the past twenty
      # four hours.
      Timeout: 900
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PendingItemsQueue.QueueName
      Environment:
        Variables:
          QueueUrl: !Ref PendingItemsQueue
          SpringboardSubDomain: !Ref SpringboardSubDomain
          SpringboardToken: !Ref SpringboardToken
      Events:
        Daily:
          Type: Schedule
          Properties:
            Schedule: rate(24 hours)

  SpringboardItemListener:
    Type: AWS::Serverless::Function
    Properties:
      Description: Feeds item update notifications sent by Springboard into the queue for processing.
      Handler: handlers/springboard-item-listener.springboardDidSendItemEvent
      Events:
        SpringboardItemUpdateEvent:
          Type: HttpApi
          Properties:
            Path: '/Springboard/Webhooks/ItemEvent'
            Method: Post
            ApiId: !Ref SpringboardItemListenerHttpApi
      Environment:
        Variables:
          QueueUrl: !Ref PendingItemsQueue
          SpringboardSubDomain: !Ref SpringboardSubDomain
          SpringboardToken: !Ref SpringboardToken
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PendingItemsQueue.QueueName

  # A table for storing miscellaneous application state.
  GeneralKVStore:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Key
        Type: String

  # A table for storing associations between SKUs and Shopify Variants.
  # When a Springboard item is updated, the corresponding Shopify variant can be found using this table.
  # If no association is found, then the item must not have been published to the store before.
  SkuVariantMap:
    Type: AWS::Serverless::SimpleTable
    Properties:
      # Also known as 'public_id' in Springboard Retail POS terms.
      # In Shopify terms this is a 'sku'
      PrimaryKey:
        Name: Sku
        Type: String

Outputs:
  AWSDeploymentListener:
    Description: The ARN of the lambda function that should be invoked after a new deployment.
    Value: !Ref AWSDeploymentListener
